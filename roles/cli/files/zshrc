#! /bin/zsh

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Allow profiling of shell startup time if something takes long
# run the following command to see the results:
# $ zprof | less
zmodload "zsh/zprof"

# record the amount of time zshrc takes to load
t0=$(date "+%s.%N")

source ~/.zplug/init.zsh

zplug "zplug/zplug", hook-build: 'zplug --self-manage'

zplug "zsh-users/zsh-autosuggestions"
# zplug "MichaelAquilina/zsh-auto-notify"
zplug "MichaelAquilina/zsh-you-should-use"
zplug "MichaelAquilina/zsh-history-filter"
zplug "MichaelAquilina/zsh-autoswitch-virtualenv"
zplug "zsh-users/zsh-syntax-highlighting"
# Theme
zplug "romkatv/powerlevel10k", as:theme

# Git Commands
zplug "MichaelAquilina/git-commands", \
    as:command, \
    use:git-clean-branches
zplug "MichaelAquilina/git-commands", \
    as:command, \
    use:git-web
zplug "MichaelAquilina/git-commands", \
    as:command, \
    use:git-default-branch

zplug "lib/completion", from:oh-my-zsh

zplug 'molovo/color', \
  as:command, \
  use:'color.zsh', \
  rename-to:color
zplug 'molovo/revolver', \
  as:command, \
  use:revolver
zplug 'molovo/zunit', \
  as:command, \
  use:zunit, \
  hook-build:'./build.zsh'

# Use the gnome-keyring-daemon
if [[ -n "$DESKTOP_SESSION" ]]; then
    # Work around a bug where gnome keyring wont work unless ssh-agent is first launched
    eval `ssh-agent -s` > /dev/null
    # Ignore insecure-memory warning as we use an encrypted swap
    eval `gnome-keyring-daemon -s 2>/dev/null`
fi

# Remove all aliases from random unexpected places
unalias -a

# Infinite History
export HISTSIZE="9999"
export SAVEHIST="9999"
export HISTFILESIZE="9999"

setopt HIST_IGNORE_DUPS
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY_TIME

setopt INTERACTIVE_COMMENTS
setopt PROMPT_CR
setopt extended_glob
# Use pushd instead of cd
setopt AUTO_PUSHD
setopt PUSHD_SILENT

export PAGER="less"
export EDITOR="nvim"
export WORDCHARS=''
export MANPAGER="nvim +Man!"
export ZSH_AUTOSUGGEST_USE_ASYNC=1
export AUTO_NOTIFY_THRESHOLD=8
export AUTO_NOTIFY_EXPIRE_TIME=4000
AUTO_NOTIFY_IGNORE+=("ipython")
export YSU_MESSAGE_POSITION="after"
export HISTORY_FILTER_EXCLUDE=("_KEY" "Authorization: ", "_TOKEN", "SECRET", "AWS_")
export HISTFILE="$HOME/.zsh_history"

bindkey '^[[1;5D' emacs-backward-word  # ctrl+left
bindkey '^[[1;5C' emacs-forward-word   # ctrl+right
bindkey '^[[H' beginning-of-line  # home key
bindkey '^[[F' end-of-line        # end key
bindkey '^[[3~' delete-char       # delete key

# Unsorted aliases, generally do not depend
# on a specific binary being installed

# show ISO8601 timestamp with history
alias history="fc -li 1"

alias h="history"
alias -g NE="2>/dev/null"
alias v="vim"
# Allows aliases to be expanded on watch commands
# See https://unix.stackexchange.com/questions/25327/watch-command-alias-expansion
alias watch='watch '
alias curl="curl --silent"
alias less="less -R"
alias xopen="xdg-open"
alias explore="nautilus"
alias xc="xsel -i -b"
alias md="mkdir"


# Add all the various PATHS here
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.fzf/bin:$PATH"
export PATH="$HOME/.yarn/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.rvm/bin:$PATH"
export PATH="/opt/nvim-linux64/bin:$PATH"
export PATH="$HOME/google-cloud-sdk/bin:$PATH"
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

# Add all functions, aliases and automations
# specific to each command or tool in its own
# section where the dependency is first checked

if type "nvim" >/dev/null; then
  # Use NeoVim if available
  alias vim=nvim
fi

if [[ -f "~/.dircolors" ]]; then
  eval $(dircolors ~/.dircolors)
fi

if type pass > /dev/null; then
  alias plog='pass git log --pretty="format:%C(bold) %G? %C(cyan) %ai %C(bold yellow)%s"'

  # Synchronise pass account
  function psync() {
    command pass git pull origin master
    command pass git push origin master
    command pass git push backup master
  }

  # Get original pass binary path before overriding it
  export passbin="$(which pass)"

  # Function wrapper around the "pass" command to add some convenient functionality
  function pass() {
      local params=()
      local RED="$(tput setaf 1)"
      local YELLOW="$(tput setaf 3)"
      local NORMAL="$(tput sgr0)"

      if [ "$1" = "generate" ]; then
          # Make sure that generate is only ever called with "--in-place"
          # with existing entries to prevent overriding useful meta-data
          local target="$HOME/.password-store/${@[-2]}.gpg"

          if stat "$target" &> /dev/null && [ ${@[(ie)-i]} -gt ${#@} ]; then
              (>&2 printf "${RED}")
              (>&2 printf "Don't use generate without -i (in-place)!\n")
              (>&2 printf "Automatically inserting -i for you\n")
              (>&2 printf "${NORMAL}")
              # automatically insert -i
              params=("${@[@]:1:1}" "-i" "${@[@]:2}")
          fi
      fi

      # Only re-use the parameters passed in if nothing was populated
      if [[ -z "$params" ]]; then
          params=("${@[@]:1}")
      fi
      (>&2 printf "${YELLOW}")
      (>&2 printf "Generated pass command: %s %s\n" "command pass" "${(j: :)params[@]}")
      (>&2 printf "${NORMAL}")

      # Actually execute the command
      command pass ${params[@]}
  }
fi

if type pyenv > /dev/null; then
  eval "$(pyenv init -)"
  eval "$(pyenv init --path)"
  eval "$(pyenv virtualenv-init -)"
fi

if type helm > /dev/null; then
  source <(helm completion zsh)
fi

if type terraform > /dev/null; then
  autoload -U +X bashcompinit && bashcompinit
  complete -o nospace -C /usr/bin/terraform terraform
fi

if type kubectl > /dev/null; then
  source <(kubectl completion zsh)

  alias kc="kubectl"

  # Make it very obvious when we are running in a k8s shell
  function kubectl {
     if [[ "$1" == "exec" ]]; then
         local context="$(command kubectl config current-context)"
         local background

         if [[ "$context" = *"-pre-prod"* ]]; then
           background="#706611"
         elif [[ "$context" = *"-prod"* ]]; then
           background="#783333"
         else
           printf "WARNING! Unknown context: %s\n" "$context"
           background="#965599"
         fi

         # Escape command to set background colours
         echo -ne "\033]11;$background\007"
     fi

     command "kubectl" $@

     if [[ "$1" == "exec" ]]; then
       # Escape command to reset background colours
       echo -ne "\033]110;\007\033]111;\007"
     fi
  }
fi

if type ansible-playbook > /dev/null; then
  alias ap="ansible-playbook"
fi

if type docker > /dev/null; then
  # We should be using the inbuilt docker compose rather than
  # the older python version
  alias docker-compose="docker compose"
  alias dc="docker compose"
fi

if [ "$(cat /proc/$PPID/comm)" = "kitty" ]; then
  # Use kitten ssh if running within the kitty terminal
  # this allows tighter integration of shortcuts such
  # as opening a new window in the same directory AND host
  alias ssh="kitten ssh"

  # If you are using another tool such as gcloud which
  # does not use the ssh alias above, then make sure to
  # set ~/.ssh/environment to contain TERM=xterm-256color
  # to ensure cursor movement works correctly
fi

if type tro > /dev/null; then
  alias todo="tro create work todo -n"
  alias todolist="tro show work todo --no-headers"

  function trello() {
    local board="$1"
    local url="$(tro url $board)"
    xdg-open "$url"
  }
fi

if type eza > /dev/null; then
  alias ls="eza -lg"
  alias ll="eza -lg --group-directories-first"
  alias la="eza -lga --group-directories-first"
fi

if type bazel > /dev/null; then
  function bquery() {
    result="$(bazel query //... | fzf)"
    BUFFER="$BUFFER$result"
  }

  zle -N bquery
  bindkey '^B' bquery
fi

if [[ -f "$HOME/.npmtoken" ]]; then
  export NPM_TOKEN="$(<$HOME/.npmtoken)"
fi

if type gcloud > /dev/null; then
  if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi
  if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi
  export GOOGLE_APPLICATION_CREDENTIALS="/home/michael/.config/gcloud/application_default_credentials.json"
fi

if type git > /dev/null; then
  function gcom() {
    git checkout "$(git default-branch)"
  }

  function grm() {
    git rebase "$(git default-branch)"
  }

  function grim() {
    local merge_base="$(git merge-base HEAD "$(git default-branch)")"

    git rebase -i "${merge_base}"
  }

  # Git Aliases
  alias gs="git status"
  alias gc="git commit"
  alias gca="git commit --amend"
  alias gco="git checkout"
  alias gap="git add -p"
  alias gpl="git pull"
  alias gr="git rebase"
  alias gst="git stash"
  alias gw="git web"
  alias gwu="git web upstream"
  alias gwi="git web --issues"
  alias gwp="git web --pulls"
  alias gwup="git web upstream --pull-request"
  alias gpum="git pull upstream master"
  alias gpud="git pull upstream develop"
  alias gp="git push"
  alias gpw="git push && git web --pull-request"
  alias gpuh="git push -u upstream HEAD"
  alias gri="git rebase -i"
  alias gd="git diff"
  alias gcb='git clean-branches $(git default-branch)'

  function grup() {
    local target="$1"
    if [[ -z "$target" ]]; then
      printf "must specify target branch to rebase on\n"
      return
    fi

    git fetch origin "$target:$target"
    git rebase "$target"
  }

  export GH="git@github.com:MichaelAquilina"
  export GL="git@gitlab.com:MichaelAquilina"
  export BB="git@bitbucket.org:maquilina"
fi

if type tig >/dev/null; then
  alias ta="tig --all"
  alias t="tig"
fi

if type fzf > /dev/null; then
  source <(fzf --zsh)
  [ -f "$HOME/.fzf/shell/completion.zsh" ] && source "$HOME/.fzf/shell/completion.zsh" 2> /dev/null
  [ -f "$HOME/.fzf/shell/key-bindings.zsh" ] && source "$HOME/.fzf/shell/key-bindings.zsh"
  export FZF_DEFAULT_COMMAND="rg --files --hidden -g '!.git'"
fi

# fnm
if [[ -d "$HOME/.local/share/fnm" ]]; then
  zplug "MichaelAquilina/zsh-autoswitch-fnm"
  export NVM_DIR="$HOME/.fnm"
  [ -s "$NVM_DIR/fnm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads fnm bash_completion
  export PATH="$HOME/.local/share/fnm:$PATH"
  eval "`fnm env`"
fi

# ====================
#  p10k configuration
#=====================

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


# Leave as last command to prevent weird issues with PATH when
# changing environments
zplug load

# Make sure to keep this at the bottom of zshrc!
t1=$(date "+%s.%N")
printf "Profile took %.3f seconds to load\n" $((t1-t0))
