#! /usr/bin/python

import json
import os
import shutil
import subprocess
import tempfile
import traceback

from ansible.module_utils.basic import *  # noqa: F403


def check_extension_exists(name):
    full_path = os.path.join(
        os.path.expanduser('~'),
        '.local', 'share', 'gnome-shell', 'extensions',
        name,
    )
    return os.path.exists(full_path)


def get_extension_state(name):
    result = subprocess.check_output([
        'gsettings', 'get', 'org.gnome.shell', 'enabled-extensions'
    ])
    if result.startswith('@as'):
        result = result.replace('@as', '')

    result = json.loads(result.replace("'", '"'))
    return 'enabled' if name in result else 'disabled'


def clone_git_repo(uri, target_path):
    subprocess.check_output([
        'git', 'clone', uri, target_path,
    ])


def toggle_extension(name, state='enable'):
    assert state in ('enable', 'disable')
    subprocess.check_output([
        'gnome-shell-extension-tool', '--{}-extension={}'.format(state, name)
    ])


def disable_extension(uri, name):
    toggle_extension(name, state='disable')


def enable_extension(uri, name, subfolder):
    if uri is not None:
        path = os.path.expanduser('~/.local/share/gnome-shell/extensions/{}'.format(name))
        if not os.path.exists(path):
            install_extension(uri, name, subfolder)

    toggle_extension(name, state='enable')


def install_extension(uri, name, subfolder):
    temp_dir = tempfile.mkdtemp()
    clone_git_repo(uri, temp_dir)

    if subfolder:
        src_path = '{}/{}'.format(temp_dir, subfolder)
    else:
        src_path = temp_dir

    extensions_path = os.path.expanduser('~/.local/share/gnome-shell/extensions')
    if not os.path.exists(extensions_path):
        os.makedirs(extensions_path)

    shutil.move(
        src_path,
        '{}/{}'.format(extensions_path, name),
    )


def main():
    module = AnsibleModule(
        argument_spec={
            'state': {'choices': ['enabled', 'disabled'], 'default': 'enabled'},
            'uri': {'required': False},
            'name': {'required': True},
            'subfolder': {'default': '', 'required': False},
        },
        supports_check_mode=True,
    )

    uri = module.params['uri']
    name = module.params.get('name')
    state = module.params['state']
    subfolder = module.params['subfolder']

    # If the folder was removed manually, then we can assume it is disabled
    # even if the gnome-shell-extension tool tells us otherwise
    exists = check_extension_exists(name)

    try:
        current_state = get_extension_state(name)
        if not exists:
            current_state = 'disabled'

        changed = current_state != state

        if changed and not module.check_mode:
            if state == 'enabled':
                enable_extension(uri, name, subfolder)
            else:
                disable_extension(uri, name)
    except Exception as e:
        module.fail_json(msg=traceback.format_exc())
    else:
        module.exit_json(
            changed=changed,
            state=state,
            uri=uri,
            current_state=current_state,
        )


if __name__ == '__main__':
    main()
